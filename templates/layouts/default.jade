include ../mixins/flash-messages

doctype html
html


	// ------------ HEADER  -------- //
	head
		meta(charset="utf-8")
		meta(name="viewport", content="width=device-width, initial-scale=1.0")
		meta(http-equiv="X-UA-Compatible" content="IE=edge")

		title= title || 'Open Block Chain'
		link(rel="shortcut icon", href="/favicon.ico", type="image/x-icon")


		//- Customise the stylesheet for your site by editing /public/styles/site.sass
		//link(href="/styles/prism.css", rel="stylesheet")
		link(href="/styles/site.css", rel="stylesheet")
		link(href="/styles/lfcollab.css", rel="stylesheet")
		link(type="text/css", rel="stylesheet" href="/styles/font-awesome-4.3.0/css/font-awesome.min.css")
		link(href='https://fonts.googleapis.com/css?family=Poppins:300,500,700' rel='stylesheet' type='text/css')
		link(href='https://fonts.googleapis.com/css?family=Roboto:400,300,300italic,400italic,700,700italic' rel='stylesheet' type='text/css')


		//- This file provides the default styling for the KeystoneJS Content Editor
		if user && user.canAccessKeystone
			link(href="/keystone/styles/content/editor.min.css", rel="stylesheet")

		block custom_css

		block head


	// ------------ BODY  -------- //
	body(data-spy="scroll" data-target=".navbar" data-offset="50")
		#body
			#bgWrap


				// ------------ Header Panel -------- //
				#header: .container
					div(role="navigation").navbar.navbar-default
						include ./top_nav


			//- Flash messages allow you to display once-off status messages to users, e.g. form
			+flash-messages(messages)


			// ------------ Main Content Panel -------- //
			#secondPanel.container
				block content

				#altNavPanel.navbar
					block altNavPanel


		// ------------ Footer -------- //
		#footer
			include footer


		// ------------ JAVASCRIPT -------- //
		script(src='/js/jquery/jquery-1.11.3.min.js')
		script(src='/js/bootstrap/bootstrap-3.3.5.min.js')
		script(src="/js/prism.js")

		if user && user.canAccessKeystone
			script(src='/keystone/js/content/editor.js')

		script(type='text/javascript').
			//var bag = !{JSON.stringify(bag)};					//throw jade json over to JS
			$(document).ready(function(){
				//console.log('bag', bag);
				
				get_swagger(populate_nav);
				
				function get_swagger(cb) {
					$.ajax({
						method: 'GET',
						url: '/swagger/rest_api.json',
						data: null,
						contentType: 'application/json',
						success: function(json) {
							console.log('Success loading swagger file', json);
							if (cb) cb(null, json);
						},
						error: function(e) {
							console.log('Error loading swagger file', e);
							if (cb) cb(e, null);
						}
					});
				}
				
				function populate_nav(err, json){
					var skip_list = ['Show/Hide'];
					var done = [];
					
					if(err == null){
						for(i in json.paths){
							for(method in json.paths[i]){
								for(x in json.paths[i][method].tags){
									//console.log(json.paths[i][method].tags[x]);
									var name = json.paths[i][method].tags[x];
									
									if(!in_array(name.toLowerCase(), done)){								//only populate it once
										done.push(name.toLowerCase());
										if($.inArray(name, skip_list) == -1){
											var html = '<li class="navLinkWrap"><a class="altNavLink" href="/swagger?url=./swagger/rest_api.json#swagger-' + name + '">' + name + '</a></li>';
											$("#apiAltNav").append(html);
										}
									}
								}
							}
						}
					}
				}
				
				function in_array(name, arr){
					for(var i in arr){
						if(arr[i] == name) return true;
					}
					return false;
				}
				
				$(document).on("click", ".altNavLink", function(){							//don't reload the page if we are on the swagger page AND the link is for a swagger tag
					if(location.pathname.indexOf('/swagger') >= 0){
						if($(this).attr('href').indexOf('/swagger') >= 0){
							return false;
						}
					}
				});

			});

		block custom_js
